{"ast":null,"code":"/**\n * # What is a Service?\n *\n * Services are an instance of something that persists for the lifetime\n * of your application. Think of them as background processes which your\n * presentational layer consumes.\n *\n * Services are normally objects that hold their own state and expose\n * behaviors via an API to affect their own state.\n */\nconst TodosService = () => {\n  const todos = [\"Do a thing\", \"Do another thing\"];\n\n  const getTodos = () => {\n    return Promise.resolve(todos);\n  };\n\n  const addTodo = todo => {\n    todos.push(todo);\n  };\n\n  return {\n    getTodos,\n    addTodo\n  };\n}; // const TodosService = {\n//   todos: [],\n//   getTodos() {\n//     return this.todos;\n//   },\n//   addTodo(todo) {\n//     this.todos.push(todo);\n//   },\n// };\n\n\n_c = TodosService;\nconst PaymentsService = {\n  payments: [{\n    description: \"Payment\",\n    amount: 25.0\n  }, {\n    description: \"Payment\",\n    amount: 65.0\n  }],\n\n  getPayments() {\n    return Promise.resolve([...this.payments]);\n  },\n\n  makePayment(amount) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        this.payments.push({\n          description: \"Payment\",\n          amount\n        });\n        resolve();\n      }, 1000);\n    });\n  }\n\n};\nexport { PaymentsService, TodosService };\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosService\");","map":{"version":3,"sources":["/Users/keithburgie/Code/sandbox/ml/code-challenge-1/ledger/src/PaymentsService.js"],"names":["TodosService","todos","getTodos","Promise","resolve","addTodo","todo","push","PaymentsService","payments","description","amount","getPayments","makePayment","setTimeout"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,YAAY,GAAG,MAAM;AACzB,QAAMC,KAAK,GAAG,CAAC,YAAD,EAAe,kBAAf,CAAd;;AAEA,QAAMC,QAAQ,GAAG,MAAM;AACrB,WAAOC,OAAO,CAACC,OAAR,CAAgBH,KAAhB,CAAP;AACD,GAFD;;AAIA,QAAMI,OAAO,GAAIC,IAAD,IAAU;AACxBL,IAAAA,KAAK,CAACM,IAAN,CAAWD,IAAX;AACD,GAFD;;AAIA,SAAO;AAAEJ,IAAAA,QAAF;AAAYG,IAAAA;AAAZ,GAAP;AACD,CAZD,C,CAcA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;KAxBML,Y;AA0BN,MAAMQ,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EAAE,CACR;AAAEC,IAAAA,WAAW,EAAE,SAAf;AAA0BC,IAAAA,MAAM,EAAE;AAAlC,GADQ,EAER;AAAED,IAAAA,WAAW,EAAE,SAAf;AAA0BC,IAAAA,MAAM,EAAE;AAAlC,GAFQ,CADY;;AAMtBC,EAAAA,WAAW,GAAG;AACZ,WAAOT,OAAO,CAACC,OAAR,CAAgB,CAAC,GAAG,KAAKK,QAAT,CAAhB,CAAP;AACD,GARqB;;AAUtBI,EAAAA,WAAW,CAACF,MAAD,EAAS;AAClB,WAAO,IAAIR,OAAJ,CAAaC,OAAD,IAAa;AAC9BU,MAAAA,UAAU,CAAC,MAAM;AACf,aAAKL,QAAL,CAAcF,IAAd,CAAmB;AAAEG,UAAAA,WAAW,EAAE,SAAf;AAA0BC,UAAAA;AAA1B,SAAnB;AACAP,QAAAA,OAAO;AACR,OAHS,EAGP,IAHO,CAAV;AAID,KALM,CAAP;AAMD;;AAjBqB,CAAxB;AAoBA,SAASI,eAAT,EAA0BR,YAA1B","sourcesContent":["/**\n * # What is a Service?\n *\n * Services are an instance of something that persists for the lifetime\n * of your application. Think of them as background processes which your\n * presentational layer consumes.\n *\n * Services are normally objects that hold their own state and expose\n * behaviors via an API to affect their own state.\n */\n\nconst TodosService = () => {\n  const todos = [\"Do a thing\", \"Do another thing\"];\n\n  const getTodos = () => {\n    return Promise.resolve(todos);\n  };\n\n  const addTodo = (todo) => {\n    todos.push(todo);\n  };\n\n  return { getTodos, addTodo };\n};\n\n// const TodosService = {\n//   todos: [],\n\n//   getTodos() {\n//     return this.todos;\n//   },\n\n//   addTodo(todo) {\n//     this.todos.push(todo);\n//   },\n// };\n\nconst PaymentsService = {\n  payments: [\n    { description: \"Payment\", amount: 25.0 },\n    { description: \"Payment\", amount: 65.0 },\n  ],\n\n  getPayments() {\n    return Promise.resolve([...this.payments]);\n  },\n\n  makePayment(amount) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        this.payments.push({ description: \"Payment\", amount });\n        resolve();\n      }, 1000);\n    });\n  },\n};\n\nexport { PaymentsService, TodosService };\n"]},"metadata":{},"sourceType":"module"}